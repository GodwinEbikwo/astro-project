---
export interface Props {
  title: string;
}
const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta http-equiv='X-UA-Compatible' content='IE=edge' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{`${title} | Studio Represent`}</title>
  </head>
  <body>
    <div class='l-root'>
      <main class='l-container'>
        <div class='l-wrapper'>
          <slot />
        </div>
      </main>
    </div>

    <style lang='scss' is:global>
      @font-face {
        font-family: 'SSRegular';
        font-style: normal;
        font-weight: normal;
        font-display: swap;
        src: url('/fonts/SSRegular.woff2') format('woff2');
      }

      *,
      *::before,
      *::after {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }

      :root {
        --font: 'SSRegular', system-ui, sans-serif;
        --px: 1.5rem;
        --py: 1.5rem;
        --accent: 124, 58, 237;
        --bg: rgb(0, 2, 18);
        --fg: hsl(56, 3.7%, 17.4%);
        --text-color: rgba(255, 255, 255, 0.85);
        --border-color: rgba(255, 255, 255, 0.3);
        --ls: -0.09em;
        --duration: 0.5s;
        --size-300: clamp(0.7rem, 0.66rem + 0.2vw, 0.8rem);
        --size-400: clamp(0.88rem, 0.83rem + 0.24vw, 1rem);
        --size-500: clamp(1.09rem, 1rem + 0.47vw, 1.33rem);
        --size-600: clamp(1.37rem, 1.21rem + 0.8vw, 1.78rem);
        --size-700: clamp(1.71rem, 1.45rem + 1.29vw, 2.37rem);
        --size-800: clamp(2.14rem, 1.74rem + 1.99vw, 3.16rem);
        --size-900: clamp(2.67rem, 2.07rem + 3vw, 4.21rem);
        --size-1000: clamp(3.34rem, 2.45rem + 4.43vw, 5.61rem);
        --size-2000: clamp(16.01rem, 16.12rem + 16.1vw, 16.28rem);
      }

      html {
        font-family: var(--font);
        scroll-behavior: initial;
      }

      html,
      body {
        width: 100%;
        min-height: 100%;
      }

      a:focus,
      button:focus {
        outline: none;
      }

      a:focus-visible,
      button:focus-visible {
        outline: 2px solid #eee;
        outline-offset: 3px;
      }

      body {
        width: 100%;
        color: #120902;
        background-color: #f7f4ef;
        font-size: 1rem;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        font-variant-ligatures: contextual common-ligatures;
        font-feature-settings: 'kern' 1, 'liga' 1, 'calt' 1;
      }

      .l-root {
        display: flex;
        flex-direction: column;
        width: 100%;
      }

      .l-container {
        display: flex;
        flex-grow: 1;
        flex-shrink: 1;
        flex-basis: auto;
        flex-direction: column;
      }

      .l-wrapper {
        width: 100%;
        min-height: 100vh;
        min-height: calc(var(--vh, 1vh) * 100);
      }

      .w-full {
        width: 100%;
      }

      .h-full {
        height: 100%;
      }

      .line {
        overflow: hidden;
        font-kerning: none;
      }

      .block {
        display: block;
      }

      .inline-block {
        display: inline-block;
      }

      .overflow-hidden {
        overflow: hidden;
      }

      .relative {
        position: relative;
      }

      .flex {
        display: flex;

        &.gap {
          gap: 2em;
        }

        &.ai {
          align-items: center;
        }

        &.jc {
          justify-content: center;
        }

        &.flex-column {
          flex-direction: column;
        }

        &.flex-row {
          flex-direction: row;
        }

        &.space-between {
          justify-content: space-between;
        }
      }
    </style>

    <script>
      import Lenis from '@studio-freight/lenis';

      const lenis = new Lenis({
        duration: 1.2,
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou
        direction: 'vertical',
        smooth: true,
        smoothTouch: false,
        touchMultiplier: 2,
        infinite: false,
      });

      function raf(time) {
        lenis.raf(time);
        requestAnimationFrame(raf);
      }

      requestAnimationFrame(raf);

      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);

      window.addEventListener('resize', () => {
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
      });

      lenis.on('scroll', ({ scroll }) => {
        const progress = scroll;
        const ani = document.querySelector(
          '.a-represent'
        ) as HTMLElement | null;

        ani.style.transform = `scale(${1 - progress / 420})`;

        if (progress >= 500) {
          ani.style.transform = `scale(1)`;
        }
      });
    </script>
  </body>
</html>
