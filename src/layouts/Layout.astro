---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta http-equiv='X-UA-Compatible' content='IE=edge' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <meta name='generator' content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class='_root'>
      <main class='_main'>
        <slot />
      </main>
    </div>

    <style is:global>
      @font-face {
        font-family: 'Inter var';
        font-weight: 100 900;
        font-display: swap;
        font-style: normal;
        src: url('/public/fonts/Inter.var.woff2') format('woff2');
      }

      :root {
        --font: 'Inter var', times, system-ui, sans-serif;
        --px: 1.5rem;
        --py: 1.5rem;
        --accent: 124, 58, 237;
        --bg: rgb(0, 2, 18);
        --fg: hsl(56, 3.7%, 17.4%);
        --text-color: rgba(255, 255, 255, 0.85);
        --border-color: rgba(255, 255, 255, 0.3);
        --ls: -0.09em;
        --duration: 0.5s;
        --size-300: clamp(0.7rem, 0.66rem + 0.2vw, 0.8rem);
        --size-400: clamp(0.88rem, 0.83rem + 0.24vw, 1rem);
        --size-500: clamp(1.09rem, 1rem + 0.47vw, 1.33rem);
        --size-600: clamp(1.37rem, 1.21rem + 0.8vw, 1.78rem);
        --size-700: clamp(1.71rem, 1.45rem + 1.29vw, 2.37rem);
        --size-800: clamp(2.14rem, 1.74rem + 1.99vw, 3.16rem);
        --size-900: clamp(2.67rem, 2.07rem + 3vw, 4.21rem);
        --size-1000: clamp(3.34rem, 2.45rem + 4.43vw, 5.61rem);
        --size-2000: clamp(16.01rem, 16.12rem + 16.1vw, 16.28rem);
      }

      *,
      *::before,
      *::after {
        box-sizing: border-box;
      }

      html,
      body,
      div,
      span,
      object,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      blockquote,
      pre,
      a,
      abbr,
      acronym,
      address,
      big,
      cite,
      code,
      del,
      dfn,
      em,
      ol,
      ul,
      li,
      fieldset,
      form,
      label,
      legend,
      caption,
      article,
      aside,
      canvas,
      details,
      embed,
      figure,
      figcaption,
      footer,
      header,
      hgroup,
      menu,
      nav,
      output,
      ruby,
      section,
      summary,
      time,
      mark,
      audio,
      video {
        margin: 0;
        padding: 0;
        border: 0;
        font: inherit;
        vertical-align: baseline;
      }
      /* HTML5 display-role reset for older browsers */
      article,
      aside,
      details,
      figcaption,
      figure,
      footer,
      header,
      hgroup,
      menu,
      nav,
      section {
        display: block;
      }

      ol,
      ul {
        list-style: none;
      }

      blockquote,
      q {
        quotes: none;
      }

      blockquote:before,
      blockquote:after,
      q:before,
      q:after {
        content: '';
        content: none;
      }

      html {
        font-family: var(--font);
        scroll-behavior: initial;
        @supports (font-variation-settings: normal) {
          html {
            font-family: var(--font);
          }
        }
      }

      html,
      body {
        width: 100%;
        min-height: 100%;
      }

      a {
        text-decoration: inherit;
        color: inherit;
        background-color: transparent;
      }

      a:focus,
      button:focus {
        outline: none;
      }

      a:focus-visible,
      button:focus-visible {
        outline: 2px solid #eee;
        outline-offset: 3px;
      }

      body {
        color: #120902;
        background-color: #f7f4ef;
        font-size: calc(15px / 22px);
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        font-variant-ligatures: contextual common-ligatures;
        font-feature-settings: 'kern' 1, 'liga' 1, 'calt' 1;
      }

      .is-transitioning {
        pointer-events: none;
        cursor: progress;
      }

      .loader {
        position: fixed;
        width: 100vw;
        height: 200vh;
        pointer-events: none;
        background-color: #fff6ed;
        z-index: 1;
        visibility: hidden;
        opacity: 0;
      }

      .w-full {
        width: 100%;
      }

      .line {
        overflow: hidden;
        font-kerning: none;
      }

      .block {
        display: block;
      }

      .inline-block {
        display: inline-block;
      }

      .overflow-hidden {
        overflow: hidden;
      }

      .relative {
        position: relative;
      }

      .flex {
        display: flex;

        &.gap {
          gap: 2em;
        }

        &.ai {
          align-items: center;
        }

        &.jc {
          justify-content: center;
        }

        &.flex-column {
          flex-direction: column;
        }

        &.flex-row {
          flex-direction: row;
        }

        &.space-between {
          justify-content: space-between;
        }
      }

      ._root {
        position: relative;
        margin: 0 auto;
        max-width: 2460px;
      }

      ._main {
        display: flex;
        flex-grow: 1;
        flex-shrink: 1;
        flex-basis: auto;
        flex-direction: column;
        min-height: 100vh;
      }
    </style>

    <script>
      import Lenis from '@studio-freight/lenis';
      import { animate, scroll } from 'motion';

      const lenis = new Lenis({
        duration: 1.2,
        easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou
        direction: 'vertical', // vertical, horizontal
        gestureDirection: 'vertical', // vertical, horizontal, both
        smooth: true,
        smoothTouch: false,
        touchMultiplier: 2,
        infinite: false,
      });

      //get scroll value
      function raf(time) {
        lenis.raf(time);
        requestAnimationFrame(raf);
      }

      function headerAni() {
        const container = document.querySelector('.inner');
        scroll(animate(container, { y: ['0%', '100%'] }, { duration: 0.1 }));
      }

      requestAnimationFrame(raf);
    </script>
  </body>
</html>
